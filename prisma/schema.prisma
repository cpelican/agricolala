generator nextAdmin {
  provider = "next-admin-generator-prisma"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  isAuthorized  Boolean     @default(false)
  tosAcceptedAt DateTime?
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  locale        String      @default("en")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  parcels       Parcel[]
  sessions      Session[]
  treatments    Treatment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Parcel {
  id         String      @id @default(cuid())
  name       String
  latitude   Float
  longitude  Float
  width      Float
  height     Float
  type       CultureType @default(VINEYARD)
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  treatments Treatment[]

  @@index([userId], map: "idx_parcel_user_id")
}

model Treatment {
  id                  String               @id @default(cuid())
  diseaseIds          String[]
  dateMin             DateTime?
  dateMax             DateTime?
  appliedDate         DateTime?
  status              TreatmentStatus      @default(TODO)
  waterDose           Float?
  parcelId            String
  userId              String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  productApplications ProductApplication[]
  parcel              Parcel               @relation(fields: [parcelId], references: [id], onDelete: Cascade)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([parcelId], map: "idx_treatment_parcel_id")
  @@index([userId], map: "idx_treatment_user_id")
}

model Product {
  id                   String               @id @default(cuid())
  brand                String
  name                 String
  maxApplications      Int?
  daysBetweenApplications Int?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  productApplications  ProductApplication[]
  composition          SubstanceDose[]
}

model ProductApplication {
  id          String    @id @default(cuid())
  dose        Float
  treatmentId String
  productId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  treatment   Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
}

model Substance {
  id             String          @id @default(cuid())
  name           String          @unique
  maxDosage      Float           // in kg / ha
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  substanceDoses SubstanceDose[]
  diseases       Disease[]       @relation("SubstanceDiseases")
}

model SubstanceDose {
  id          String    @id @default(cuid())
  dose        Float     // in percent of active substance dose
  substanceId String
  productId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  substance   Substance @relation(fields: [substanceId], references: [id], onDelete: Cascade)
}

model Disease {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  substances  Substance[] @relation("SubstanceDiseases")
  // Months of disease presence, between 1 and 12
  sensitivityMonthMin Int?
  sensitivityMonthMax Int?
}

model UserSubstanceAggregation {
  id                              String   @id @default(cuid())
  userId                          String
  substanceId                     String
  substanceName                   String
  year                           Int
  totalDoseOfProduct             Float    @default(0)
  totalUsedOfPureActiveSubstance Float    @default(0)
  totalUsedOfPureActiveSubstancePerHa Float @default(0)
  monthlyData                    Float[]  @default([])
  applicationCount               Int      @default(0)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  @@unique([userId, substanceId, year])
  @@index([userId, year])
}

model ParcelSubstanceAggregation {
  id                              String   @id @default(cuid())
  parcelId                        String
  substanceId                     String
  substanceName                   String
  year                           Int
  totalDoseOfProduct             Float    @default(0)
  totalUsedOfPureActiveSubstance Float    @default(0)
  totalUsedOfPureActiveSubstancePerHa Float @default(0)
  monthlyData                    Float[]  @default([])
  applicationCount               Int      @default(0)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  @@unique([parcelId, substanceId, year])
  @@index([parcelId, year])
}

enum CultureType {
  VINEYARD
  PEACHES
}

enum TreatmentStatus {
  TODO
  DONE
}
